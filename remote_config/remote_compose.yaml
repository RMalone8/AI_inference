services:
  ollama-server:
    image: ollama/ollama:latest
    container_name: ollama-server-${MODEL_NAME}
    volumes:
      - ${SERV_VOL}
      #- ollama_models:/root/.ollama
      #- ollama:/data/models/ollama
    #devices:
    #  - "nvidia.com/gpu=all"
    #tty: true
    #stdin_open: true
    restart: unless-stopped

  ollama-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    depends_on:
      - ollama-server
    container_name: ollama-client-${MODEL_NAME}
    environment:
      - OLLAMA_HOST=http://ollama-server-${MODEL_NAME}:11434
      - CLIENT_TYPE=${MODEL_SPECS}

  ollama-stats:
    image: quay.io/navidys/prometheus-podman-exporter
    depends_on:
      - ollama-server
    container_name: ollama-stats
    environment:
      - CONTAINER_HOST=unix:///tmp/podman.sock
    userns_mode: "keep-id:uid=65534" # -> comment this out to use the jetson machine
    security_opt:
      - "label=disable"
    volumes:
      - ${HOST_SOCK}:/tmp/podman.sock
      #- /run/user/1001/podman/podman.sock:/tmp/podman.sock
      #- /run/podman/podman.sock:/tmp/podman.sock
    ports:
      - "8000:9882"

  node-exporter:
    image: docker.io/prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave # jetson
    command:
      - '--path.rootfs=/host' # jetson
      - '--no-collector.thermal_zone'
    ports:
      - "9100:9100"

  # jetson_stats_node_exporter:
  #   build:
  #     context: jetson_stats_node_exporter/.
  #     dockerfile: Dockerfile
  #   container_name: jetson_stats_node_exporter
  #   restart: always
  #   ports:
  #     - "9100:9100"  # Map internal port 9100 to a different external port 9100
  #   volumes:
  #     - /run/jtop.sock:/run/jtop.sock
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:9100/metrics"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 60s

  prometheus:
    build:
      context: .
      dockerfile: Dockerfile.promremote
    container_name: prometheus
    restart: unless-stopped
      #- ./prometheus.yml:/etc/prometheus/prometheus.yml
      #- prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

volumes:
  #ollama:
  #  external: true
  ollama_models:
  #prometheus_data: {}

x-podman:
  in_pod: false
# for the volumes, when using armchair use ollama_models. When using the jetson use ollama