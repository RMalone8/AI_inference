# /// script
# dependencies = [
#   "pydantic",
#   "langchain[openai]",
#   "requests",
# ]
# ///

from langchain_openai import ChatOpenAI

from langchain_core.messages import HumanMessage, SystemMessage

from pydantic import BaseModel, Field

import base64
from pathlib import Path

import os
import time
import requests
import subprocess

ITER_NO = 10

class Animal(BaseModel):
    species: str = Field(description="The species of the animal")
    breed: str = Field(description="The breed of the animal")
    features: list[str] = Field(description="List of features used in classification")

SYSTEM = SystemMessage(
    "You are an expert animal recognition AI. Your task is to analyze images and accurately identify the species (e.g., dog, cat, bird) and, when possible, the specific breed (e.g., Golden Retriever, Siamese, Persian). If the breed is unclear, provide the most likely options or state that the breed is unknown. Be precise, use common breed names, and note any distinctive physical features that support your classification."  # generated by chatgpt
)

def main():
    model_name = os.environ.get("CLIENT_TYPE", "Cannot Find Model Name")
    host = os.environ.get("HOST", "Cannot Find Host")
    
    print(f"-CLIENT CONFIGURATION-")
    print(f"Model Name: {model_name}")
    print(f"Host: {host}")
    print(f"API Base: {host}/v1")
    print("=" * 30)

    # Wait for server to be ready
    print("Waiting for server to be ready...")
    max_retries = 30
    for attempt in range(max_retries):
        try:
            response = requests.get(f"{host}/v1/models", timeout=10)
            if response.status_code == 200:
                print("Server is ready!")
                break
        except requests.exceptions.RequestException as e:
            print(f"Attempt {attempt + 1}/{max_retries}: Server not ready yet ({e})")
            time.sleep(10)
    else:
        print("Server failed to become ready after maximum retries")
        return

    model = ChatOpenAI(
        model=model_name,
        temperature=0,
        base_url=f"{host}/v1",
        api_key="dummy",
    ) # .with_structured_output(Animal)

    for i in range(ITER_NO):
        r = requests.get('https://cataas.com/cat')
        r.raise_for_status()
        print(f"ITER: {i}")
        print(f"{model_name} is asked: ")
        print("Describe the breed and species of the animal in this image, return as JSON")
        print("The model returns: ")
        print(
            model.invoke(
                [
                    SYSTEM,
                    HumanMessage(
                        content=[
                            {
                                "type": "text",
                                "text": "Describe the breed and species of the animal in this image, return as JSON",
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64.b64encode(r.content).decode()}"
                                }
                            },
                        ]
                    ),
                ]
            )
        )

if __name__ == "__main__":
    main()